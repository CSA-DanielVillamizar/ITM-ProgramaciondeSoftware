M6 Snippets
-----------


EmployeeEdit.razor
------------------


        <div class="row mb-3">
            <label for="lastName" class="col-form-label col-md-3">Last name: </label>
            <div class="col-md-8">
                <InputText id="lastName" class="form-control col-md-8" placeholder="Enter last name"></InputText>
            </div>

        </div>
		
		<div class="row mb-3">
                <label for="firstName" class="col-form-label col-md-3">First name: </label>
                <div class="col-md-8">
                    <InputText id="firstName" class="form-control col-md-8" @bind-Value="@Employee.FirstName" placeholder="Enter first name"></InputText>
                </div>
               
            </div>

            <div class="row mb-3">
                <label for="birthdate" class="col-form-label col-md-3">Birthdate: </label>
                <div class="col-md-8">
                    <InputDate id="birthdate" class="form-control col-md-8" @bind-Value="@Employee.BirthDate" placeholder="Enter birthdate"></InputDate>
                </div>
            </div>

            <div class="row mb-3">
                <label for="email" class="col-form-label col-md-3">Email: </label>
                <div class="col-md-8">
                    <InputText id="email" class="form-control col-md-8" @bind-Value="@Employee.Email" placeholder="Enter email"></InputText>
                </div>
                
            </div>

            <div class="row mb-3">
                <label for="street" class="col-form-label col-md-3">Street: </label>
                <div class="col-md-8">
                    <InputText id="street" class="form-control col-md-8" @bind-Value="@Employee.Street" placeholder="Enter street"></InputText>
                </div>
            </div>

            <div class="row mb-3">
                <label for="zip" class="col-form-label col-md-3">Zip code: </label>
                <div class="col-md-8">
                    <InputText id="zip" class="form-control col-md-8" @bind-Value="@Employee.Zip" placeholder="Enter zip code"></InputText>
                </div>
            </div>

            <div class="row mb-3">
                <label for="city" class="col-form-label col-md-3">City: </label>
                <div class="col-md-8">
                    <InputText id="city" class="form-control col-md-8" @bind-Value="@Employee.City" placeholder="Enter city"></InputText>
                </div>
            </div>
			
			
CountryDataService.cs
---------------------

    public class CountryDataService : ICountryDataService
    {
        private readonly HttpClient _httpClient = default!;

        public CountryDataService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        public async Task<IEnumerable<Country>> GetAllCountries()
        {
            return await JsonSerializer.DeserializeAsync<IEnumerable<Country>>
                (await _httpClient.GetStreamAsync($"api/country"), new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }

        public async Task<Country> GetCountryById(int countryId)
        {
            return await JsonSerializer.DeserializeAsync<Country>
                (await _httpClient.GetStreamAsync($"api/country{countryId}"), new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
    }
	
InputSelect for Country
-----------------------

 <InputSelect id="country" class="form-select col-md-8" @bind-Value="@Employee.CountryId">
                        @foreach (var country in Countries)
                        {
                            <option value="@country.CountryId">@country.Name</option>
                        }
 </InputSelect>
 
 
IJobCategoryDataService.cs
--------------------------

public interface IJobCategoryDataService
    {
        Task<IEnumerable<JobCategory>> GetAllJobCategories();
        Task<JobCategory> GetJobCategoryById(int jobCategoryId);
    }
	
	
JobCategoryDataService.cs
-------------------------
	
    public class JobCategoryDataService : IJobCategoryDataService
    {
        private readonly HttpClient _httpClient;

        public JobCategoryDataService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        public async Task<IEnumerable<JobCategory>> GetAllJobCategories()
        {
            return await JsonSerializer.DeserializeAsync<IEnumerable<JobCategory>>
                (await _httpClient.GetStreamAsync($"api/jobcategory"), new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }

        public async Task<JobCategory> GetJobCategoryById(int jobCategoryId)
        {
            return await JsonSerializer.DeserializeAsync<JobCategory>
                (await _httpClient.GetStreamAsync($"api/jobcategory/{jobCategoryId}"), new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
    }
	

EmployeeEdit.razor
------------------


<div class="row mb-3">
                <label for="phonenumber" class="col-form-label col-md-3">Phone number: </label>
                <div class="col-md-8">
                    <InputText id="phonenumber" class="form-control col-md-8" @bind-Value="@Employee.PhoneNumber" placeholder="Enter phone number"></InputText>
                </div>
            </div>

            <div class="row mb-3">
                <label for="longitude" class="col-form-label col-md-3">Longitude: </label>
                <div class="col-md-8">
                    <InputNumber id="longitude" class="form-control col-md-8" @bind-Value="@Employee.Longitude"></InputNumber>
                </div>
            </div>

            <div class="row mb-3">
                <label for="latitude" class="col-form-label col-md-3">Latitude: </label>
                <div class="col-md-8">
                    <InputNumber id="latitude" class="form-control col-md-8" @bind-Value="@Employee.Latitude"></InputNumber>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-8 offset-md-3">
                    <div class="form-check">
                        <InputCheckbox id="smoker" class="form-check-input" @bind-Value="@Employee.Smoker"></InputCheckbox>
                        <label class="form-check-label" for="smoker">
                            Smoker
                        </label>
                    </div>
                </div>
            </div>

            <div class="row mb-3">
                <label for="jobcategory" class="col-form-label col-md-3">Job category: </label>
                <div class="col-md-8">
                    <InputSelect id="jobcategory" class="form-select col-md-8" @bind-Value="@Employee.JobCategoryId">
                        @foreach (var jobCategory in JobCategories)
                        {
                            <option value="@jobCategory.JobCategoryId">@jobCategory.JobCategoryName</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="row mb-3">
                <InputRadioGroup Name="genderRadioGroup" @bind-Value="@Employee.Gender">
                    <label class="col-form-label col-md-3">Gender: </label>
                    <div class="col-md-8">
                        @foreach (var gender in (Gender[])Enum.GetValues(typeof(Gender)))
                        {
                            <InputRadio Name="genderRadioGroup" Value="gender" class="form-check-input" />
                            <label class="form-check-label">
                                @gender
                            </label>
                            <br />
                        }
                    </div>
                </InputRadioGroup>
            </div>

            <div class="row mb-3">
                <label for="maritalstatus" class="col-form-label col-md-3">Marital status: </label>
                <div class="col-md-8">
                    <InputSelect id="maritalstatus" class="form-select col-md-8" @bind-Value=@Employee.MaritalStatus>
                        <option value="@(MaritalStatus.Single)">Single</option>
                        <option value="@(MaritalStatus.Married)">Married</option>
                        <option value="@(MaritalStatus.Other)">Other</option>
                    </InputSelect>
                </div>
            </div>

            <div class="row mb-3">
                <label for="joineddate" class="col-form-label col-md-3">Joined on: </label>
                <div class="col-md-8">
                    <InputDate id="joineddate" class="form-control" @bind-Value="@Employee.JoinedDate" placeholder="Enter date joined"></InputDate>
                </div>
            </div>

            <div class="row mb-3">
                <label for="exitdate" class="col-form-label col-md-3">Left on: </label>
                <div class="col-md-8">
                    <InputDate id="exitdate" class="form-control" @bind-Value="@Employee.ExitDate" placeholder="Enter exit date"></InputDate>
                </div>
            </div>

            <div class="row mb-3">
                <label for="comment" class="col-form-label col-md-3">Comment: </label>
                <div class="col-md-8">
                    <InputTextArea id="comment" class="form-control" @bind-Value="@Employee.Comment" placeholder="Enter comment"></InputTextArea>
                </div>
              
            </div>
			


EmployeeDataService.cs
----------------------


public async Task<Employee> AddEmployee(Employee employee)
        {
            var employeeJson =
                new StringContent(JsonSerializer.Serialize(employee), Encoding.UTF8, "application/json");

            var response = await _httpClient.PostAsync("api/employee", employeeJson);

            if (response.IsSuccessStatusCode)
            {
                return await JsonSerializer.DeserializeAsync<Employee>(await response.Content.ReadAsStreamAsync());
            }

            return null;
        }

        public async Task UpdateEmployee(Employee employee)
        {
            var employeeJson =
                new StringContent(JsonSerializer.Serialize(employee), Encoding.UTF8, "application/json");

            await _httpClient.PutAsync("api/employee", employeeJson);
        }

        public async Task DeleteEmployee(int employeeId)
        {
            await _httpClient.DeleteAsync($"api/employee/{employeeId}");
        }
		

HandleValidSubmit
-----------------

protected async Task HandleValidSubmit()
        {
            Saved = false;

            if (Employee.EmployeeId == 0) //new
            {
                var addedEmployee = await EmployeeDataService.AddEmployee(Employee);
                if (addedEmployee != null)
                {
                    StatusClass = "alert-success";
                    Message = "New employee added successfully.";
                    Saved = true;
                }
                else
                {
                    StatusClass = "alert-danger";
                    Message = "Something went wrong adding the new employee. Please try again.";
                    Saved = false;
                }
            }
            else
            {
                await EmployeeDataService.UpdateEmployee(Employee);
                StatusClass = "alert-success";
                Message = "Employee updated successfully.";
                Saved = true;
            }
        }
		
		
Image Adding
------------

 //image adding
                if (selectedFile != null)
                {
                    var file = selectedFile;
                    Stream stream = file.OpenReadStream();
                    MemoryStream ms = new();
                    await stream.CopyToAsync(ms);
                    stream.Close();

                    Employee.ImageName = file.Name;
                    Employee.ImageContent = ms.ToArray();
                }
				
				
Employee with validation
------------------------

public class Employee
    {
        public int EmployeeId { get; set; }

        [Required]
        [StringLength(50, ErrorMessage = "First name is too long.")]
        public string FirstName { get; set; } = string.Empty;

        [Required]
        [StringLength(50, ErrorMessage = "Last name is too long.")]
        public string LastName { get; set; } = string.Empty;

        public DateTime BirthDate { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;
        public string Street { get; set; } = string.Empty;
        public string Zip { get; set; } = string.Empty;
        public string City { get; set; } = string.Empty;
        public int CountryId { get; set; }
        public Country? Country { get; set; }
        public string PhoneNumber { get; set; } = string.Empty;
        public bool Smoker { get; set; }
        public MaritalStatus MaritalStatus { get; set; }
        public Gender Gender { get; set; }

        [StringLength(1000, ErrorMessage = "Comment length can't exceed 1000 characters.")]
        public string? Comment { get; set; }
        public DateTime? JoinedDate { get; set; }
        public DateTime? ExitDate { get; set; }

        public int JobCategoryId { get; set; }
        public JobCategory? JobCategory { get; set; }

        public double? Latitude { get; set; }
        public double? Longitude { get; set; }

        [NotMapped]
        public byte[]? ImageContent { get; set; }
        public string? ImageName { get; set; }
    }